"""
変数の使い方について

PythonではJava・C#と違い、データ型を宣言する必要がない
変数の様な関数・クラスなどを識別するための記号を、識別子という
Pythonの識別子は、以下の用法を守る必要がある

1. Unicode文字を利用できる(アンダースコア以外の記号は不可)
2. 1文字目は数字以外である
3. アルファベットの大文字／小文字は区別される
4. 予約語でないこと
5. 文字数の制限はない

基本的に、識別子につかう記号は英数字・アンダースコアに限定する
1. 名前からデータの内容を類推できる
2. 長すぎない + 短すぎない
3. ローマ字での命名は避ける
4. 見た目が紛らわしくない
5. 記法を統一する
6. 先頭のアンダースコア

良い記法の例としては、camelCase記法、Pascal記法、アンダースコア記法等がある
Pythonでは変数・関数にアンダースコア記法、クラスにPascal記法を使うのが普通

camelCase記法 - userName
Pascal記法 - UserName
アンダースコア記法 - user_name, USER_NAME

"""

msg = "Hello world!!"
print(msg)

#del命令を使えば宣言済みの変数を破棄できる

name = "Python"
del name
print(name)


"""
データ型について
Pythonは動的型付け言語とよばれ、変数のデータ型を後から変更することができる。
Pythonで使える型の一覧
数値 - int, float, complex
文字 - str, bytes
コンテナ - list, tuple, dict, set
その他 - bool, NoneType

それぞれの性質から、型には以下の呼称が使われる
ミュータブル（mutable）： 変更可能 
イミュータブル（immutable）： 変更不可 
イテラブル（iterable）： 反復可能
シーケンス（sequence）： 順序を持つ（インデックスでのアクセスが可）
コンテナー（container）： 配下に複数の値を格納可能

"""

data = "Python foundation"
data = 2920

"""
論理型について

以下の値は自動的にFalseと見なされる。 
空値（ None） 
数値 の ゼロ（ 0、 0. 0、 0j など） 
空文字列、 空のリストなど（''、( )、[ ]、{}、set( )、range(0)）
"""

"""
数値型について

整数リテラル(int)は10進・16進・8進・2進の4種を扱うことができる
float型に関しては、指数表現で表すこともできる。
(1.173205e-7 = 1.173205 * 10~7)

complex型に関しては、c = complex(1,5)の様に実数値から作成できる。 
"""

"""
文字型について

'You are "great" teacher'の様なダブルクォーテーションをstr型にしたい場合は、文字列に
ふくみたい文書をシングルクオーテーションで囲う

文字列にどうしてもHe's の様なシングルクオーテーションを使わなくてはいけない場合は、エスケープシーケンスを使う
有用なエスケープシーケンスには、改行とバックスラッシュがある(\n , \)
"""

c = complex(1,5)
print(c)

print(c.real) # 結果： 1. 0
print(c.imag) # 結果： 5. 0


print('you are "great" teacher!')
print("you are 'great' teacher!")

print("He\s great teacher!")
print("How to print \"great\" teacher with escape sequence")
print("改行を無視 → \ 改行 → \n →　最後の行")

"""
特殊な文字列表現について
ダブルクオート3つで、複数行の文字列をそのまま表現できる
丸カッコの内部では、キーワード／ リテラル の 区切りで自由改行できるという性質がある
これは長い文字列になる引数を表現するのに役立つ

ロウ文字列
文字列の先頭にrをつけることで、エスケープシーケンスを使わずに表記したままに文字列を表現する

フォーマット文字列
文字列の先頭にfをつけることで、文字列内に{}で囲った変数を埋め込むことができる

"""

print("""Hello,
Next sentence""")

msg = (
    "Hello",
    "Next argument"
)

print(r"C:\Users\user\Pictures\イラスト")

name = "Zack"
print(f"Hello, {name}!")


"""
リスト(list)について
リストは複数の値をまとめて扱うのに役立つ。リストは、仕切りのある入れ物と考えるとわかりやすい
リストはブラケットでカンマ区切りの値を囲うことで作成できる
"""

data = ["Zack ","Byte","Wiz"]
print(data)
print(data[0])

"""
2次元リスト(行列)の書き方
1番目のインデックスはベクトルの要素を、2番目は行列内のベクトルを参照する
"""

data = [
    ["X1", "X2", "X3"],
    ["Y1", "Y2", "Y3"],
    ["Z1", "Z2", "Z3"],
]

print(data[0][1])
print(data[1][0])
print(data[2][2])

"""
3次元リスト(行列)の書き方
2次元リストと同様、下位の要素から参照していくことができる
"""

data = [
[
    ["X1-1", "X2-1", "X3-1"],
    ["Y1-1", "Y2-1", "Y3-1"],
    ["Z1-1", "Z2-1", "Z3-1"],
],
[
    ["X1-2", "X2-2", "X3-2"],
    ["Y1-2", "Y2-2", "Y3-2"],
    ["Z1-2", "Z2-2", "Z3-2"],
],
]

print(data[0][2][0])
print(data[1][2][1])
















